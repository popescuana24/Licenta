@model int

@{
    // Product ID is passed as the model
    var productId = Model;
}

<!-- Style Assistant Floating Button -->
<div class="style-assistant-fab">
    <button id="styleAssistantBtn" class="circular-button">
        <i class="fas fa-tshirt"></i>
    </button>
</div>

<!-- Style Assistant Chat Interface -->
<div id="chatInterface" class="chat-container" style="display: none;">
    <div class="chat-header">
        <h3>Style Assistant</h3>
        <button class="close-btn" id="closeChat">Ã—</button>
    </div>
    
    <div class="chat-messages" id="chatMessages">
        <!-- Messages will appear here -->
    </div>
    
    <div class="chat-input">
        <input type="text" id="userInput" placeholder="Ask about styling this item...">
        <button id="sendButton">Send</button>
    </div>
</div>

<!-- CSS Styles -->
<style>
    /* Style Assistant Floating Button */
    .style-assistant-fab {
        position: fixed;
        bottom: 30px;
        right: 30px;
        z-index: 999;
    }
    
    .circular-button {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background-color: #000;
        color: white;
        border: none;
        box-shadow: 0 4px 10px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        cursor: pointer;
        transition: transform 0.2s, background-color 0.2s;
    }
   
    .circular-button:hover {
        transform: scale(1.1);
        background-color: #333;
    } 
    
    .circular-button i {
        color: white;
    }
    
    /* Chat Container */
    .chat-container {
        position: fixed;
        bottom: 100px;
        right: 30px;
        width: 350px;
        height: 500px;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 5px 25px rgba(0,0,0,0.25);
        display: flex;
        flex-direction: column;
        z-index: 1000;
        overflow: hidden;
        font-family: 'Montserrat', sans-serif;
    }

    /* Chat Header */
    .chat-header {
        padding: 15px;
        background-color: #000;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }

    .chat-header h3 {
        margin: 0;
        font-size: 18px;
        color: white;
        font-weight: 500;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 22px;
        cursor: pointer;
        color: white;
        opacity: 0.8;
        transition: opacity 0.2s;
    }

    .close-btn:hover {
        opacity: 1;
    }

    /* Chat Messages Area */
    .chat-messages {
        flex-grow: 1;
        padding: 15px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        background-color: #f9f9f9;
        gap: 12px;
    }

    /* Message Styling */
    .message {
        position: relative;
        margin-bottom: 8px;
        max-width: 85%;
        border-radius: 18px;
        padding: 10px 15px;
        line-height: 1.4;
        font-size: 14px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .user-message {
        align-self: flex-end;
        background-color: #000;
        color: white;
        border-bottom-right-radius: 4px;
    }

    .bot-message {
        align-self: flex-start;
        background-color: white;
        color: #333;
        border-bottom-left-radius: 4px;
    }

    /* Chat Input Area */
    .chat-input {
        display: flex;
        padding: 12px;
        border-top: 1px solid rgba(0,0,0,0.1);
        background-color: white;
    }

    .chat-input input {
        flex-grow: 1;
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 24px;
        margin-right: 10px;
        font-size: 14px;
        outline: none;
        transition: border-color 0.2s;
    }

    .chat-input button {
        background-color: #000;
        color: white;
        border: none;
        border-radius: 24px;
        padding: 8px 16px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s;
    }

    .chat-input button:hover {
        background-color: #333;
    }

    /* Typing Indicator */
    .typing-indicator {
        align-self: flex-start;
        background-color: white;
        color: #777;
        border-radius: 18px;
        padding: 10px 15px;
        font-size: 14px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
    }

    .typing-indicator::after {
        content: "...";
        animation: typing 1.5s infinite;
        width: 20px;
        text-align: left;
    }

    @@keyframes typing {
        0% { content: "."; }
        33% { content: ".."; }
        66% { content: "..."; }
    }

    /* Quick Response Buttons */
    .quick-responses {
        display: flex;
        justify-content: center;
        margin: 10px 0;
        width: 100%;
    }

    .quick-response-button {
        background-color: #000;
        color: white;
        border: none;
        border-radius: 24px;
        padding: 10px 20px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        text-align: center;
    }

    .quick-response-button:hover {
        background-color: #333;
    }

    /* Product recommendations styling */
    .recommended-products {
        width: 100%;
        margin: 15px 0;
        background-color: white;
        border-radius: 8px;
        padding: 10px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }

    .product-category h4 {
        font-size: 16px;
        margin: 10px 0;
        padding-bottom: 5px;
        border-bottom: 1px solid #eee;
        color: #333;
        font-weight: 600;
    }

    /* Vertical Layout for Products */
    .products-grid {
        display: flex;
        flex-direction: column;
        gap: 16px;
        margin-bottom: 15px;
    }

    /* Product Card Layout - Vertical */
    .products-grid .product-card {
        border: 1px solid #eee;
        border-radius: 8px;
        overflow: hidden;
        display: block;
        transition: transform 0.2s, box-shadow 0.2s;
        cursor: pointer;
    }

    .products-grid .product-card:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }

    /* Product Image Container */
    .products-grid .product-image-container {
        width: 100%;
        height: 140px;
        overflow: hidden;
    }

    .products-grid .product-image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Product Info Below Image */
    .products-grid .product-info {
        padding: 10px;
        text-align: center;
    }

    .products-grid .product-name {
        font-size: 14px;
        font-weight: 500;
        margin-bottom: 2px;
        color: #000;
        text-decoration: none;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .products-grid .product-color {
        font-size: 12px;
        color: #777;
        margin-bottom: 3px;
    }

    .products-grid .product-price {
        font-size: 14px;
        font-weight: 600;
        color: #000;
        margin-bottom: 8px;
    }

    /* Product Link in Chat */
    .product-link {
        display: block;
        text-decoration: none;
        color: inherit;
        transition: all 0.2s;
    }

    .product-link:hover {
        text-decoration: none;
        color: inherit;
    }

    .product-fallback-bg {
        background-color: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>

<script>
    // Wait for DOM content to be fully loaded before initializing
    document.addEventListener('DOMContentLoaded', function() {
        initializeStyleAssistant();
    });

    // Main initialization function for Style Assistant
    function initializeStyleAssistant() {
        // Get product information from the page
        const productId = @productId;
        const productCategory = '@ViewBag.CategoryName';
        const productName = '@ViewBag.ProductName';
        
        // Get UI elements
        const styleAssistantBtn = document.getElementById('styleAssistantBtn');
        const chatInterface = document.getElementById('chatInterface');
        const closeChat = document.getElementById('closeChat');
        const chatMessages = document.getElementById('chatMessages');
        const userInput = document.getElementById('userInput');
        const sendButton = document.getElementById('sendButton');
        
        console.log("Style Assistant initialized for product ID:", productId);
        
        // Open chat when button is clicked
        styleAssistantBtn.addEventListener('click', function() {
            // Show chat interface
            chatInterface.style.display = 'flex';
            
            // Clear any previous messages
            chatMessages.innerHTML = '';
            
            // Add welcome message
            const welcomeMsg = document.createElement('div');
            welcomeMsg.className = 'message bot-message';
            welcomeMsg.innerHTML = `<p>Hi there! I can help you find items that go well with this ${productName}. What would you like to know?</p>`;
            chatMessages.appendChild(welcomeMsg);
            
            // Add quick action buttons
            const buttonsDiv = document.createElement('div');
            buttonsDiv.className = 'quick-responses';
            
            // "Show matching items" button
            const matchingBtn = document.createElement('button');
            matchingBtn.textContent = 'Show matching items';
            matchingBtn.className = 'quick-response-button';
            matchingBtn.onclick = function() {
                // Add user message to chat
                const userMsg = document.createElement('div');
                userMsg.className = 'message user-message';
                userMsg.innerHTML = '<p>Show me what would go well with this</p>';
                chatMessages.appendChild(userMsg);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                // Get product recommendations
                getProductRecommendations();
            };
            
            // "Style tips" button
            const styleBtn = document.createElement('button');
            styleBtn.textContent = 'Style tips';
            styleBtn.className = 'quick-response-button';
            styleBtn.style.marginLeft = '10px';
            styleBtn.onclick = function() {
                // Add user message to chat
                const userMsg = document.createElement('div');
                userMsg.className = 'message user-message';
                userMsg.innerHTML = '<p>Can you give me some style tips for this item?</p>';
                chatMessages.appendChild(userMsg);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                // Send message to backend
                sendChatMessage('Can you give me some style tips for this item?');
            };
            
            // Add buttons to container
            buttonsDiv.appendChild(matchingBtn);
            buttonsDiv.appendChild(styleBtn);
            chatMessages.appendChild(buttonsDiv);
            
            // Focus on input field
            userInput.focus();
        });
        
        // Close chat when X is clicked
        closeChat.addEventListener('click', function() {
            chatInterface.style.display = 'none';
        });
        
        // Send message when send button is clicked
        sendButton.addEventListener('click', function() {
            const message = userInput.value.trim();
            if (message) {
                // Show user message in chat
                const userMsg = document.createElement('div');
                userMsg.className = 'message user-message';
                userMsg.innerHTML = `<p>${message}</p>`;
                chatMessages.appendChild(userMsg);
                
                // Clear input field
                userInput.value = '';
                
                // Send message to backend
                sendChatMessage(message);
            }
        });
        
        // Send message when Enter key is pressed
        userInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const message = userInput.value.trim();
                if (message) {
                    // Show user message
                    const userMsg = document.createElement('div');
                    userMsg.className = 'message user-message';
                    userMsg.innerHTML = `<p>${message}</p>`;
                    chatMessages.appendChild(userMsg);

                    // Clear input
                    userInput.value = '';
                    
                    // Send to backend
                    sendChatMessage(message);
                }
            }
        });
        
        // Function to get product recommendations from backend API
        function getProductRecommendations() {
            // Show loading indicator
            const loadingIndicator = document.createElement('div');
            loadingIndicator.className = 'typing-indicator';
            loadingIndicator.textContent = 'Finding perfect matches';
            chatMessages.appendChild(loadingIndicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Make API call to get recommendations
            fetch('/api/StyleAssistant/recommendations', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId: productId })
            })
            .then(response => response.json())
            .then(data => {
                console.log("Received recommendation data:", data);
                
                // Remove loading indicator
                chatMessages.removeChild(loadingIndicator);
                
                // Show products if available
                if (data.recommendedProducts && data.recommendedProducts.length > 0) {
                    createProductDisplay(data.recommendedProducts);
                } else {
                    const noItemsMsg = document.createElement('div');
                    noItemsMsg.className = 'message bot-message';
                    noItemsMsg.innerHTML = '<p>I couldn\'t find any matching items at the moment.</p>';
                    chatMessages.appendChild(noItemsMsg);
                }
            })
            .catch(error => {
                console.error("Error getting recommendations:", error);
                
                // Remove loading indicator
                chatMessages.removeChild(loadingIndicator);
                
                // Show error message
                const errorMsg = document.createElement('div');
                errorMsg.className = 'message bot-message';
                errorMsg.innerHTML = '<p>Sorry, I encountered an error while finding matching items.</p>';
                chatMessages.appendChild(errorMsg);
            });
        }
        
        // Function to send chat message to backend API
        function sendChatMessage(message) {
            // Show loading indicator
            const loadingIndicator = document.createElement('div');
            loadingIndicator.className = 'typing-indicator';
            loadingIndicator.textContent = 'Thinking';
            chatMessages.appendChild(loadingIndicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Make API call to chat endpoint
            fetch('/api/StyleAssistant/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productId: productId,
                    userMessage: message
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log("Chat response:", data);
                
                // Remove loading indicator
                chatMessages.removeChild(loadingIndicator);
                
                // Format message with line breaks
                const formattedMessage = data.message.replace(/\n/g, '<br>');
                
                // Show bot response
                const botMsg = document.createElement('div');
                botMsg.className = 'message bot-message';
                botMsg.innerHTML = `<p>${formattedMessage}</p>`;
                chatMessages.appendChild(botMsg);
                
                // Display recommended products if any
                if (data.recommendedProducts && data.recommendedProducts.length > 0) {
                    createProductDisplay(data.recommendedProducts);
                }
                
                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            })
            .catch(error => {
                console.error("Error sending message:", error);
                
                // Remove loading indicator
                chatMessages.removeChild(loadingIndicator);
                
                // Show error message
                const errorMsg = document.createElement('div');
                errorMsg.className = 'message bot-message';
                errorMsg.innerHTML = '<p>Sorry, I encountered an error while processing your request.</p>';
                chatMessages.appendChild(errorMsg);
            });
        }
        
        // Function to create and display recommended products
        function createProductDisplay(products) {
            console.log("Creating product display with", products.length, "products");
            
            // Filter products from the same category as current product
            const filteredProducts = products.filter(product => 
                product.categoryName && product.categoryName.toUpperCase() !== productCategory.toUpperCase()
            );
            
            if (filteredProducts.length === 0) {
                const noProductsMsg = document.createElement('div');
                noProductsMsg.className = 'message bot-message';
                noProductsMsg.innerHTML = '<p>I couldn\'t find any complementary items from different categories.</p>';
                chatMessages.appendChild(noProductsMsg);
                return;
            }
            
            // Group products by category
            const productsByCategory = {};
            filteredProducts.forEach(product => {
                const categoryName = product.categoryName || 'Other';
                if (!productsByCategory[categoryName]) {
                    productsByCategory[categoryName] = [];
                }
                productsByCategory[categoryName].push(product);
            });
            
            // Create container for recommendations
            const container = document.createElement('div');
            container.style.width = '100%';
            container.style.margin = '15px 0';
            container.style.backgroundColor = 'white';
            container.style.borderRadius = '8px';
            container.style.padding = '10px';
            container.style.boxShadow = '0 2px 6px rgba(0,0,0,0.1)';
            
            // Add products by category
            for (const category in productsByCategory) {
                // Only show up to 3 products per category
                const categoryProducts = productsByCategory[category].slice(0, 3);
                
                // Create category header
                const categoryHeader = document.createElement('h4');
                categoryHeader.textContent = `${category}:`;
                categoryHeader.style.fontSize = '16px';
                categoryHeader.style.margin = '10px 0';
                categoryHeader.style.paddingBottom = '5px';
                categoryHeader.style.borderBottom = '1px solid #eee';
                categoryHeader.style.color = '#333';
                categoryHeader.style.fontWeight = '600';
                container.appendChild(categoryHeader);
                
                // Create products grid
                const productsGrid = document.createElement('div');
                productsGrid.style.display = 'flex';
                productsGrid.style.flexDirection = 'column';
                productsGrid.style.gap = '16px';
                productsGrid.style.marginBottom = '20px';
                
                // Add each product
                categoryProducts.forEach(product => {
                    // Create product card as clickable link
                    const card = document.createElement('a');
                    card.href = `/Product/Details/${product.productId}`;
                    card.className = 'product-link';
                    card.style.border = '1px solid #eee';
                    card.style.borderRadius = '8px';
                    card.style.overflow = 'hidden';
                    card.style.marginBottom = '16px';
                    card.style.backgroundColor = 'white';
                    card.style.display = 'block';
                    card.style.textDecoration = 'none';
                    card.style.color = 'inherit';
                    
                    // Create image container
                    const imageContainer = document.createElement('div');
                    imageContainer.style.position = 'relative';
                    imageContainer.style.width = '100%';
                    imageContainer.style.paddingBottom = '100%'; // Square aspect ratio
                    imageContainer.style.background = '#f9f9f9';
                    imageContainer.style.overflow = 'hidden';
                    
                    // Create image element
                    const img = document.createElement('img');
                    // Use imageUrl if available or construct from name
                    let imageUrl = product.imageUrl || `/images/products/${product.name.replace(/\s+/g, '')}_img_0.jpg`;
                    // Add _img_0 suffix if missing
                    if (!imageUrl.includes('_img_0') && !imageUrl.includes('_img_1')) {
                        imageUrl += '_img_0';
                    }
                    
                    img.src = imageUrl;
                    img.alt = product.name;
                    img.style.position = 'absolute';
                    img.style.top = '0';
                    img.style.left = '0';
                    img.style.width = '100%';
                    img.style.height = '100%';
                    img.style.objectFit = 'cover';
                    
                    // Set fallback image
                    img.onerror = function() {
                        this.src = '/images/products/no-image.jpg';
                    };
                    
                    // Assemble image container
                    imageContainer.appendChild(img);
                    card.appendChild(imageContainer);
                    
                    // Create product info section
                    const infoDiv = document.createElement('div');
                    infoDiv.style.padding = '10px';
                    infoDiv.style.textAlign = 'center';
                    
                    // Product name
                    const nameDiv = document.createElement('div');
                    nameDiv.textContent = product.name;
                    nameDiv.style.fontSize = '14px';
                    nameDiv.style.fontWeight = '500';
                    nameDiv.style.color = '#000';
                    nameDiv.style.whiteSpace = 'nowrap';
                    nameDiv.style.overflow = 'hidden';
                    nameDiv.style.textOverflow = 'ellipsis';
                    nameDiv.style.marginBottom = '2px';
                    infoDiv.appendChild(nameDiv);
                    
                    // Product color
                    if (product.color) {
                        const colorDiv = document.createElement('div');
                        colorDiv.textContent = product.color;
                        colorDiv.style.fontSize = '12px';
                        colorDiv.style.color = '#777';
                        colorDiv.style.marginBottom = '3px';
                        infoDiv.appendChild(colorDiv);
                    }
                    
                    // Product price
                    const priceDiv = document.createElement('div');
                    priceDiv.textContent = `${typeof product.price === 'number' ? product.price.toFixed(2) : '0.00'} LEI`;
                    priceDiv.style.fontSize = '14px';
                    priceDiv.style.fontWeight = '600';
                    priceDiv.style.color = '#000';
                    priceDiv.style.marginBottom = '8px';
                    infoDiv.appendChild(priceDiv);
                    
                    card.appendChild(infoDiv);
                    
                    // Add card to grid
                    productsGrid.appendChild(card);
                });
                
                container.appendChild(productsGrid);
            }
            
            // Add to chat messages
            chatMessages.appendChild(container);
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }
</script>