@model ClothingWebApp.Models.Product
@{
    ViewData["Title"] = Model.Name;
    
    
    var sizeOptions = new List<string>();
    bool showSizeSelector = true;
    
    if (Model.Category != null)
    {
        if (Model.Category.Name == "Bags")
        {
         
            showSizeSelector = false;
        }
        else if (Model.Category.Name == "Shoes")
        {
            
            sizeOptions = new List<string> { "36", "37", "38", "39", "40", "41", "42", "43", "44" };
        }
        else
        {
          
            sizeOptions = new List<string> { "XS", "S", "M", "L", "XL", "XXL" };
        }
    }
    else
    {
        sizeOptions = new List<string> { "XS", "S", "M", "L", "XL", "XXL" };
    }
    
    var availableSizes = new List<string>();
    if (!string.IsNullOrEmpty(Model.Size))
    {
        availableSizes = Model.Size.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                  .Select(s => s.Trim())
                                  .ToList();
    }
    
    // If no sizes are specified in the product, use the category-based options
    if (availableSizes.Count == 0)
    {
        availableSizes = sizeOptions;
    }
    
    // Set viewbag values for the style assistant
    ViewBag.ProductName = Model.Name;
    ViewBag.CategoryName = Model.Category?.Name ?? "Clothing";
}

<div class="container mt-5">
    <div class="row">
        <!-- Product Images - Left Column -->
        <div class="col-md-6 mb-4">
            <div class="product-gallery">
                <!-- Main image container -->
                <div class="main-image-container mb-3">
                    <img id="main-product-image" src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid product-image" 
                         onerror="this.onerror=null; this.src='/images/products/no-image.jpg';">
                </div>
                
                <!-- Thumbnails -->
                <div class="thumbnails d-flex">
                    @{
                        // Main image thumbnail
                        <div class="thumbnail-item me-3 active" onclick="changeMainImage(this, '@Model.ImageUrl')">
                            <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid"
                                 onerror="this.onerror=null; this.src='/images/products/no-image.jpg';">
                        </div>
                        
                        // Create alternative image path using the correct pattern: replace _img_0 with _img_1
                        string altImageUrl = "";
                        if (Model.ImageUrl.Contains("_img_0"))
                        {
                            altImageUrl = Model.ImageUrl.Replace("_img_0", "_img_1");
                        }
                        
                        <div class="thumbnail-item me-3" id="alt-thumbnail" onclick="changeMainImage(this, '@altImageUrl')">
                            <img src="@altImageUrl" alt="@Model.Name - Alternate View" class="img-fluid"
                                 onerror="this.parentElement.style.display='none';">
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Product Details - Right Column -->
        <div class="col-md-6">
            <div class="product-details">
                <h1 class="product-title mb-3">@Model.Name</h1>
                <p class="product-price mb-3">@Model.Price.ToString("0.00") LEI</p>
                <p class="product-description mb-4">@Model.Description</p>
                
                <!-- Color information -->
                <div class="product-color mb-4">
                    <h5 class="mb-2">Color:</h5>
                    <p class="mb-0">@Model.Color</p>
                </div>
                
                <!-- Add to Cart Form -->
                <form asp-controller="Cart" asp-action="AddToCart" method="post" class="mb-4" id="addToCartForm">
                    <input type="hidden" name="productId" value="@Model.ProductId" />
                    <input type="hidden" name="selectedSize" id="selectedSizeInput" value="@(showSizeSelector ? "" : "OneSize")" />
                    
                    <!-- Size Selector (only shown for products that need sizes) -->
                    @if (showSizeSelector && availableSizes.Count > 0)
                    {
                        <div class="size-selection mb-4">
                            <h5 class="mb-3">Select Size:</h5>
                            <div class="size-options d-flex flex-wrap">
                                @foreach (var size in availableSizes)
                                {
                                    @if (size.ToLower() == "one size" || size.ToLower() == "onesize")
                                    {
                                        <div class="size-option one-size-option me-2 mb-2" onclick="selectSize(this, '@size')" data-size="@size">
                                            One Size
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="size-option me-2 mb-2" onclick="selectSize(this, '@size')" data-size="@size">
                                            @size
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                    
                    <!-- Add to Cart Button -->
                    <button type="submit" id="addToCartBtn" class="btn w-100" @(showSizeSelector ? "disabled" : "")>
                        Add to Cart
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_StyleAssistantPartial", Model.ProductId)

<style>
    /* Product Details Styling */
    .product-title {
        font-size: 24px;
        font-weight: 600;
    }
    
    .product-price {
        font-size: 22px;
        font-weight: 600;
        color: #000;
    }
    
    .product-description {
        line-height: 1.6;
        color: #555;
    }
    
    /* Size Selector Styling */
    .size-selection {
        margin-bottom: 20px;
    }
    
    .size-options {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .size-option {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 50px;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s;
    }
    
    /* One Size option styling */
    .one-size-option {
        width: auto;
        padding: 0 20px;
    }
    
    .size-option:hover {
        border-color: #000;
    }
    
    .size-option.active {
        background-color: #000;
        color: white;
        border-color: #000;
    }
    
    /* Button Styling */
    #addToCartBtn {
        background-color: #b00000;
        border-color: #b00000;
        color: white;
        padding: 12px;
        font-weight: 500;
    }
    
    
    #addToCartBtn:disabled {
        background-color: #ddd;
        border-color: #ddd;
        color: #888;
    }
    
    /* Product Gallery Styling */
    .main-image-container {
        border: 1px solid #eee;
        padding: 10px;
        border-radius: 4px;
        max-width: 450px;
        margin: 0 auto;
    }
    
    #main-product-image {
        max-width: 100%;
        max-height: 450px;
        object-fit: contain;
        display: block;
        margin: 0 auto;
    }
    
    .thumbnails {
        justify-content: center;
    }
    
    .thumbnail-item {
        border: 1px solid #ddd;
        padding: 3px;
        cursor: pointer;
        width: 70px;
        height: 70px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        transition: all 0.2s;
    }
    
    .thumbnail-item.active {
        border-color: #000;
    }
    
    .thumbnail-item img {
        max-height: 100%;
        object-fit: contain;
    }
    
    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .product-title {
            font-size: 20px;
        }
        
        .product-price {
            font-size: 18px;
        }
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM fully loaded - initializing product page");
            
            // Only handle size selection if the size selector is present
            const sizeSelector = document.querySelector('.size-selection');
            if (sizeSelector) {
                const sizeOptions = document.querySelectorAll('.size-option');
                console.log("Found " + sizeOptions.length + " size options");
                
                if (sizeOptions.length > 0) {
                    // Check if there's already an active size
                    const activeSize = document.querySelector('.size-option.active');
                    if (!activeSize && sizeOptions.length > 0) {
                        // If no size is active, select the first one
                        console.log("No active size found, selecting first size: " + sizeOptions[0].getAttribute('data-size'));
                        selectSize(sizeOptions[0], sizeOptions[0].getAttribute('data-size'));
                    }
                }
            }
            
            // Check if the alternative thumbnail loaded correctly
            const altThumbnail = document.getElementById('alt-thumbnail');
            if (altThumbnail) {
                const img = altThumbnail.querySelector('img');
                img.onerror = function() {
                    altThumbnail.style.display = 'none';
                };
            }
            
            // Add form submission handler
            const addToCartForm = document.getElementById('addToCartForm');
            if (addToCartForm) {
                addToCartForm.addEventListener('submit', function(e) {
                    // Check if size selection is required (for products with sizes)
                    const sizeSelector = document.querySelector('.size-selection');
                    if (sizeSelector) {
                        // Get the selected size
                        const selectedSize = document.getElementById('selectedSizeInput').value;
                        console.log("Form submitted with selected size: " + selectedSize);
                        
                        // Continue with form submission if size is selected
                        if (!selectedSize) {
                            e.preventDefault();
                            console.log("Form submission prevented - no size selected");
                            alert("Please select a size before adding to cart");
                        }
                    }
                });
            }
        });
        
        function selectSize(element, size) {
            console.log("Size selected: " + size);
            
            // Remove active class from all size options
            document.querySelectorAll('.size-option').forEach(el => {
                el.classList.remove('active');
            });
            
            element.classList.add('active');
          
            const selectedSizeInput = document.getElementById('selectedSizeInput');
            if (selectedSizeInput) {
                selectedSizeInput.value = size;
                console.log("Updated hidden input value to: " + selectedSizeInput.value);
            } else {
                console.error("Could not find selectedSizeInput element");
            }
            
            // Enable add to cart button if it was disabled
            const addToCartBtn = document.getElementById('addToCartBtn');
            if (addToCartBtn && addToCartBtn.disabled) {
                addToCartBtn.disabled = false;
                console.log("Add to cart button enabled");
            }
        }
        
        function changeMainImage(thumbnail, imageSrc) {
            // Update main image
            const mainImage = document.getElementById('main-product-image');
            mainImage.src = imageSrc;
            mainImage.onerror = function() {
                this.onerror = null;
                this.src = '/images/products/no-image.jpg';
            };
            
            // Update active thumbnail
            document.querySelectorAll('.thumbnail-item').forEach(item => {
                item.classList.remove('active');
            });
            thumbnail.classList.add('active');
        }
    </script>
}