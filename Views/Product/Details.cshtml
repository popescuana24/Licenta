@model ClothingWebApp.Models.Product
@{
    ViewData["Title"] = Model.Name;
}

<div class="container mt-5">
    <div class="row">
        <!-- Product Images -->
        <div class="col-md-6 mb-4">
            <div class="product-gallery">
                <div class="main-image-container mb-3">
                    <img id="main-product-image" src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid product-image" 
                         onerror="this.src='/images/products/no-image.jpg'">
                </div>
                <div class="thumbnails d-flex">
                    @{
                        // Main image
                        <div class="thumbnail-item me-3 active" onclick="changeMainImage(this, '@Model.ImageUrl')">
                            <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid"
                                 onerror="this.src='/images/products/no-image.jpg'">
                        </div>
                        
                        // Use consistent naming convention for second image
                        string imageFileName = System.IO.Path.GetFileName(Model.ImageUrl);
                        string imageFolderPath = Model.ImageUrl.Substring(0, Model.ImageUrl.Length - imageFileName.Length);
                        string imageNameWithoutExt = System.IO.Path.GetFileNameWithoutExtension(imageFileName);
                        string imageExt = System.IO.Path.GetExtension(imageFileName);
                        string secondImageName = imageNameWithoutExt + "_2" + imageExt;  // Using _2 suffix
                        string secondImage = imageFolderPath + secondImageName;
                        
                        <div class="thumbnail-item me-3" onclick="changeMainImage(this, '@secondImage')">
                            <img src="@secondImage" alt="@Model.Name - Alternate View" class="img-fluid"
                                 onerror="this.src='/images/products/no-image.jpg'">
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Product Info -->
        <div class="col-md-6">
            <h1 class="product-title mb-2">@Model.Name</h1>
            <p class="text-muted mb-2">@Model.Category.Name</p>
            <h2 class="product-detail-price mb-4">@Model.Price.ToString("0.00") LEI</h2>
            
            <p class="mb-3">Color: <span class="fw-bold">@Model.Color</span></p>
            
            @if (!Model.Category.Name.ToUpper().Contains("BAG"))
            {
                <div class="mb-4">
                    <p class="mb-2">Size:</p>
                    <div class="size-selector d-flex flex-wrap">
                        @{
                            var sizes = new List<string> { "XS", "S", "M", "L", "XL" };
                            
                            if (Model.Category.Name.ToUpper().Contains("SHOE"))
                            {
                                sizes = new List<string> { "36", "37", "38", "39", "40", "41", "42" };
                            }
                            
                            foreach (var size in sizes)
                            {
                                <div class="size-option" onclick="selectSize(this, '@size')">@size</div>
                            }
                        }
                    </div>
                </div>
            }
            
            <form asp-controller="Cart" asp-action="AddToCart" method="post" class="mb-4">
                <input type="hidden" name="productId" value="@Model.ProductId" />
                <input type="hidden" id="selectedSize" name="selectedSize" value="@(Model.Category.Name.ToUpper().Contains("BAG") ? "One Size" : "")" />
                <button type="submit" class="btn w-100" id="addToCartBtn" style="background-color: #b10000; color: white;">ADD TO CART</button>
            </form>
            
            <div class="product-description mt-4">
                <h4>Product Details</h4>
                <p>@Model.Description</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Make sure to select a size by default
        document.addEventListener('DOMContentLoaded', function() {
            const sizeOptions = document.querySelectorAll('.size-option');
            if (sizeOptions.length > 0) {
                selectSize(sizeOptions[0], sizeOptions[0].textContent.trim());
            }
        });
        
        function selectSize(element, size) {
            // Remove active class from all size options
            document.querySelectorAll('.size-option').forEach(el => {
                el.classList.remove('active');
            });
            
            // Add active class to clicked element
            element.classList.add('active');
            
            // Update hidden input
            document.getElementById('selectedSize').value = size;
            
            // Enable add to cart button
            document.getElementById('addToCartBtn').disabled = false;
        }
        
        function changeMainImage(thumbnail, imageSrc) {
            // Update main image
            const mainImage = document.getElementById('main-product-image');
            
            // Store original src in case the new one fails to load
            const originalSrc = mainImage.src;
            
            // Set up error handler before changing source
            mainImage.onerror = function() {
                // If the new image fails to load, revert to the original
                this.src = originalSrc;
                console.log('Failed to load alternate image: ' + imageSrc);
            };
            
            // Try to load the new image
            mainImage.src = imageSrc;
            
            // Update active thumbnail
            document.querySelectorAll('.thumbnail-item').forEach(item => {
                item.classList.remove('active');
            });
            thumbnail.classList.add('active');
        }
    </script>
}